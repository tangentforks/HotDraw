<?xml version="1.0"?><st-source><!-- Name: HotDraw Tool DevelopmentNotice: Copyright 1993 - 2013 John BrantThis utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: psql_public_cst_2007DbTrace: 87410DbUsername: niallrDbVersion: 1.7DevelopmentPrerequisites: #(#(#any 'HotDraw Framework' ''))PackageName: HotDraw Tool DevelopmentParcel: #('HotDraw Tool Development')ParcelName: HotDraw Tool DevelopmentPrerequisiteParcels: #(#('HotDraw Framework' ''))PrintStringCache: (1.7,niallr)Version: 1.7Date: 3:03:16 PM April 5, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.4) of 22 March 2013 on 5 April 2013 at 15:03:16</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ToolStateCommandEditor</name><environment>Refactory.HotDraw</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation GUI</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>ToolStateTransitionModel</name><environment>Refactory.HotDraw</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to type points </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation Models</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>TransitionEditor</name><environment>Refactory.HotDraw</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transition eventType figureList charactersHolder characterList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation GUI</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>TransitionType</name><environment>Refactory.HotDraw</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>event </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation Models</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>StateTransitionFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.LineFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation GUI</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>ToolStateModel</name><environment>Refactory.HotDraw</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name command position isEndState isExternal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation Models</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>ToolStateMachineDrawing</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.Drawing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation GUI</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>ToolStateMachineEditor</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.DrawingEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>states connections </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation Models</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>ToolStateFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.EllipseFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation GUI</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>FigureTransitionType</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.TransitionType</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figureClasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation Models</category><attributes><package>HotDraw Tool Development</package></attributes></class><class><name>CharacterTransitionType</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.TransitionType</super><private>false</private><indexed-type>none</indexed-type><inst-vars>characters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Tool Creation Models</category><attributes><package>HotDraw Tool Development</package></attributes></class><shared-variable><name>NameIndex</name><environment>Refactory.HotDraw.ToolStateFigure</environment><private>true</private><constant>false</constant><category>As yet unclassified</category><initializer>0</initializer><attributes><package>HotDraw Tool Development</package></attributes></shared-variable><methods><class-id>Refactory.HotDraw.ToolStateCommandEditor</class-id> <category>aspects</category><body package="HotDraw Tool Development">source	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^source isNil		ifTrue:			[source := String new asValue]		ifFalse:			[source]</body></methods><methods><class-id>Refactory.HotDraw.ToolStateCommandEditor</class-id> <category>actions</category><body package="HotDraw Tool Development">acceptCommand	(self class compilerClass 		evaluate: self source value		for: Tool		notifying: (builder componentAt: #source) widget controller		logged: false) class 		== [] class ifFalse: [^self].	state command: self source value.	self closeRequest</body></methods><methods><class-id>Refactory.HotDraw.ToolStateCommandEditor</class-id> <category>instance creation</category><body package="HotDraw Tool Development">state: aToolStateModel 	state := aToolStateModel.	self source value: state command</body></methods><methods><class-id>Refactory.HotDraw.ToolStateCommandEditor class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">state: aToolStateModel 	^(self new)		state: aToolStateModel;		yourself</body></methods><methods><class-id>Refactory.HotDraw.ToolStateTransitionModel</class-id> <category>compilation</category><body package="HotDraw Tool Development">writeContinuedDefinitionOn: codeStream 	type writeContinuedDefinitionOn: codeStream to: '(Tool stateFor: ''' , to name , ''')'</body><body package="HotDraw Tool Development">writeDefinitionOn: codeStream 	type writeDefinitionOn: codeStream to: '(Tool stateFor: ''' , to name , ''')'</body><body package="HotDraw Tool Development">writeStoreStringOn: codeStream 	codeStream		nextPutAll: ' from: (stateTable at: ''';		nextPutAll: from name;		nextPutAll: '''); to: (stateTable at: ''';		nextPutAll: to name;		nextPutAll: '''); type: '.	type storeOn: codeStream.	codeStream nextPutAll: '; points: '.	points storeOn: codeStream.	codeStream nextPutAll: '; yourself'</body></methods><methods><class-id>Refactory.HotDraw.ToolStateTransitionModel</class-id> <category>accessing</category><body package="HotDraw Tool Development">from	^from</body><body package="HotDraw Tool Development">from: aToolStateModel 	from := aToolStateModel.	self changed</body><body package="HotDraw Tool Development">label	^type printString</body><body package="HotDraw Tool Development">points	^points</body><body package="HotDraw Tool Development">points: aCollection 	points := aCollection</body><body package="HotDraw Tool Development">to	^to</body><body package="HotDraw Tool Development">to: aToolStateModel 	to := aToolStateModel.	self changed</body><body package="HotDraw Tool Development">type	^type</body><body package="HotDraw Tool Development">type: aTransitionType 	type := aTransitionType.	self changed</body></methods><methods><class-id>Refactory.HotDraw.ToolStateTransitionModel</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	from := to := nil.	type := TransitionType new</body></methods><methods><class-id>Refactory.HotDraw.ToolStateTransitionModel class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">new	^super new initialize</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor</class-id> <category>private</category><body package="HotDraw Tool Development">charactersForType	| characters |	characters := OrderedCollection new.	self characterList selections do: [:each | characters addAll: each value].	characters addAll: self charactersHolder value.	^characters asArray</body><body package="HotDraw Tool Development">disableAll: aSymbolList 	builder isNil ifTrue: [^self].	aSymbolList do: 			[:each | 			| widget |			widget := builder componentAt: each.			widget notNil 				ifTrue: 					[widget						disable;						beInvisible]]</body><body package="HotDraw Tool Development">enableAll: aSymbolList 	builder isNil ifTrue: [^self].	aSymbolList do: 			[:each | 			| widget |			widget := builder componentAt: each.			widget notNil 				ifTrue: 					[widget						beVisible;						enable]]</body><body package="HotDraw Tool Development">printableCharacters	^String withAll: ((32 to: 127) collect: [:each | Character value: each])</body><body package="HotDraw Tool Development">selectCharacters: characters 	| newSelections charsLeft |	newSelections := self characterList list 				reject: [:each | each value contains: [:char | (characters includes: char) not]].	self characterList selections: newSelections.	self charactersHolder value: ''.	charsLeft := characters asOrderedCollection.	self charactersForType do: [:each | charsLeft remove: each ifAbsent: []].	self charactersHolder 		value: (String withAll: (charsLeft reject: [:each | each isSymbol]))</body><body package="HotDraw Tool Development">specialCharacters	^#(#tab #del #backspace #esc #cr #newPage #lf) 		collect: [:each | Character perform: each]</body><body package="HotDraw Tool Development">symbolKeys	^#(#F1 #F2 #F3 #F4 #F5 #F6 #F7 #F8 #F9 #F10 #F11 #F12 #Insert #Home #End #PageUp #PageDown #Up #Down #Left #Right #NumLock)</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor</class-id> <category>interface opening</category><body package="HotDraw Tool Development">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self eventType onChangeSend: #changedEvent to: self.	self transition onChangeSend: #changedTransition to: self.	self		changedEvent;		changedTransition</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">buildCharacterList	| characters |	characters := OrderedCollection new.	self symbolKeys 		do: [:each | characters add: each asString -&gt; (Array with: each)].	self specialCharacters 		do: [:each | characters add: each printString -&gt; (Array with: each)].	characters add: 'Printable' -&gt; self printableCharacters.	self characterList list: characters</body><body package="HotDraw Tool Development">buildFigureList	self figureList 		list: (Figure withAllSubclasses 				asSortedCollection: [:a :b | a name &lt; b name]) asList</body><body package="HotDraw Tool Development">initialize	super initialize.	self		buildCharacterList;		buildFigureList</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor</class-id> <category>aspects</category><body package="HotDraw Tool Development">characterList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^characterList isNil		ifTrue:			[characterList := MultiSelectionInList new]		ifFalse:			[characterList]</body><body package="HotDraw Tool Development">charactersHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^charactersHolder isNil		ifTrue:			[charactersHolder := String new asValue]		ifFalse:			[charactersHolder]</body><body package="HotDraw Tool Development">eventType	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^eventType isNil		ifTrue:			[eventType := nil asValue]		ifFalse:			[eventType]</body><body package="HotDraw Tool Development">figureList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^figureList isNil		ifTrue:			[figureList := MultiSelectionInList new]		ifFalse:			[figureList]</body><body package="HotDraw Tool Development">transition	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^transition isNil		ifTrue:			[transition := nil asValue]		ifFalse:			[transition]</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor</class-id> <category>changing</category><body package="HotDraw Tool Development">changedEvent	(#(#keyPress #keyRelease) includes: self eventType value) 		ifTrue: 			[self				disableAll: #(#figure);				enableAll: #(#character)]		ifFalse: 			[self				enableAll: #(#figure);				disableAll: #(#character)]</body><body package="HotDraw Tool Development">changedTransition	self transition value == #figure 		ifTrue: [self enableAll: #(#figureList)]		ifFalse: [self disableAll: #(#figureList)].	self transition value == #character 		ifTrue: [self enableAll: #(#characterList #characters #label)]		ifFalse: [self disableAll: #(#characterList #characters #label)]</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor</class-id> <category>accessing</category><body package="HotDraw Tool Development">type	| newType |	newType := (TransitionType withAllSubclasses				detect: [:each | each transition == self transition value]) new.	newType event: self eventType value.	newType figureClasses: self figureList selections asArray.	newType characters: self charactersForType.	^newType</body><body package="HotDraw Tool Development">type: aType 	self eventType value: aType event.	self transition value: aType class transition.	self figureList selections: aType figureClasses.	self selectCharacters: aType characters</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">onType: aTransitionType 	^(self new)		type: aTransitionType;		yourself</body></methods><methods><class-id>Refactory.HotDraw.TransitionType</class-id> <category>accessing</category><body package="HotDraw Tool Development">characters	^#()</body><body package="HotDraw Tool Development">characters: aCollection</body><body package="HotDraw Tool Development">event	^event</body><body package="HotDraw Tool Development">event: aSymbol 	event := aSymbol</body><body package="HotDraw Tool Development">figureClasses	^Array with: Figure</body><body package="HotDraw Tool Development">figureClasses: aCollection</body><body package="HotDraw Tool Development">priority	^SmallInteger maxVal</body></methods><methods><class-id>Refactory.HotDraw.TransitionType</class-id> <category>compilation</category><body package="HotDraw Tool Development">writeContinuedDefinitionOn: codeStream to: aString 	codeStream nextPutAll: '; '.	self writeMessageSendOn: codeStream to: aString</body><body package="HotDraw Tool Development">writeDefinitionOn: codeStream to: aString 	codeStream nextPutAll: '(SimpleTransitionTable new) '.	self writeMessageSendOn: codeStream to: aString</body><body package="HotDraw Tool Development">writeMessageSendOn: codeStream to: aString 	codeStream		nextPutAll: 'goto: ';		nextPutAll: aString</body></methods><methods><class-id>Refactory.HotDraw.TransitionType</class-id> <category>verifying</category><body package="HotDraw Tool Development">conflictsWith: aTransitionType 	^self class == aTransitionType class</body></methods><methods><class-id>Refactory.HotDraw.TransitionType</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	event := #redButtonPress</body></methods><methods><class-id>Refactory.HotDraw.TransitionType</class-id> <category>printing</category><body package="HotDraw Tool Development">printOn: aStream	aStream nextPutAll: event</body></methods><methods><class-id>Refactory.HotDraw.TransitionType class</class-id> <category>accessing</category><body package="HotDraw Tool Development">transition	^#always</body></methods><methods><class-id>Refactory.HotDraw.TransitionType class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">new	^super new initialize</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>accessing</category><body package="HotDraw Tool Development">menuAt: aPoint	| mb |	mb := MenuBuilder new.	mb add: 'Transition type...' -&gt; #changeTransitionType.	^mb menu</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>testing</category><body package="HotDraw Tool Development">isConnectionFigure	^true</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>displaying</category><body package="HotDraw Tool Development">centerPoint	| middle |	middle := points at: points size // 2 + 1.	^points size odd		ifTrue: [middle]		ifFalse: [((points at: points size // 2) + middle) // 2]</body><body package="HotDraw Tool Development">displayFigureOn: aGraphicsContext 	super displayFigureOn: aGraphicsContext.	self displayLabelOn: aGraphicsContext</body><body package="HotDraw Tool Development">displayLabelOn: aGraphicsContext 	self label displayOn: aGraphicsContext at: self centerPoint</body><body package="HotDraw Tool Development">label	^self model label asComposedText</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>bounds accessing</category><body package="HotDraw Tool Development">computePreferredBounds	^super computePreferredBounds		merge: (self centerPoint extent: self label extent)</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>actions</category><body package="HotDraw Tool Development">changeTransitionType	| editor |	editor := TransitionEditor onType: model type.	editor open ifFalse: [^self].	model type: editor type</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>changing</category><body package="HotDraw Tool Development">changed: anAspectSymbol with: aParameter	model points: points.	^super changed: anAspectSymbol with: aParameter</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	super initialize.	self connectable: false.	self model: ToolStateTransitionModel new</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure</class-id> <category>updating</category><body package="HotDraw Tool Development">update: anAspectSymbol with: aParameter from: aSender 	aSender == model ifTrue: [^self recomputePreferredBounds].	super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.HotDraw.StateTransitionFigure class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">fromModel: aToolStateTransitionModel connecting: aFigure to: anotherFigure 	| figure |	figure := self new.	figure		model: aToolStateTransitionModel;		points: aToolStateTransitionModel points;		recomputePreferredBounds.	aFigure createStartConnectionConstraintFor: figure at: figure startPoint.	anotherFigure createStopConnectionConstraintFor: figure		at: figure stopPoint.	aFigure addDependent: figure.	anotherFigure addDependent: figure.	figure addStopArrow.	^figure</body></methods><methods><class-id>Refactory.HotDraw.ToolStateModel</class-id> <category>accessing</category><body package="HotDraw Tool Development">command	^command</body><body package="HotDraw Tool Development">command: aString 	command := aString asString.	self changed: #command</body><body package="HotDraw Tool Development">isEndState	^isEndState</body><body package="HotDraw Tool Development">isEndState: aBoolean 	isEndState := aBoolean.	self changed: #isEndState</body><body package="HotDraw Tool Development">isExternal	^isExternal</body><body package="HotDraw Tool Development">isExternal: aBoolean 	isExternal := aBoolean.	self changed: #isExternal</body><body package="HotDraw Tool Development">name	^name</body><body package="HotDraw Tool Development">name: aString 	name := aString asString.	self changed: #name</body><body package="HotDraw Tool Development">position	^position</body><body package="HotDraw Tool Development">position: aPoint 	position := aPoint</body></methods><methods><class-id>Refactory.HotDraw.ToolStateModel</class-id> <category>compilation</category><body package="HotDraw Tool Development">writeDefinitionOn: codeStream 	isExternal ifTrue: [^self].	codeStream		nextPutAll: '	Tool states at: ''';		nextPutAll: name;		nextPutAll: ''' put: (';		nextPutAll: (isEndState ifTrue: ['EndToolState'] ifFalse: ['ToolState']);		nextPutAll: ' name: ''';		nextPutAll: name;		nextPutAll: ''' command: ';		nextPutAll: command;		nextPutAll: ').';		cr</body></methods><methods><class-id>Refactory.HotDraw.ToolStateModel</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	command := '[:tool :event | ]'.	name := 'state'.	position := 0 @ 0.	isEndState := false.	isExternal := false</body></methods><methods><class-id>Refactory.HotDraw.ToolStateModel</class-id> <category>storing</category><body package="HotDraw Tool Development">storeOn: aStream 	| deps |	deps := self myDependents.	self myDependents: nil.	[super storeOn: aStream] ensure: [self myDependents: deps]</body></methods><methods><class-id>Refactory.HotDraw.ToolStateModel class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">new	^super new initialize</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineDrawing</class-id> <category>actions</category><body package="HotDraw Tool Development">addStateAt: aPoint 	self add: (ToolStateFigure createAt: aPoint)</body><body package="HotDraw Tool Development">compile	| selector |	selector := Dialog request: 'Enter a method name:' initialAnswer: ''.	selector isEmpty ifTrue: [^self].	model 		compileForClass: Tool class		selector: selector asSymbol		ifFail: [:error | ^Dialog warn: error].	(Dialog confirm: 'Do you want to reinitialize the tools?') 		ifTrue: [Tool reinitialize]</body><body package="HotDraw Tool Development">verify	model verifyIfFail: [:error | ^Dialog warn: error]</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineDrawing</class-id> <category>accessing</category><body package="HotDraw Tool Development">menuAt: aPoint 	| mb |	mb := MenuBuilder new.	mb		add: 'Add state' -&gt; [self addStateAt: aPoint];		line;		add: 'Verify' -&gt; #verify;		add: 'Compile' -&gt; #compile;		line;		add: 'Inspect...' -&gt; #inspect.	^mb menu</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineDrawing</class-id> <category>adding</category><body package="HotDraw Tool Development">add: aFigure 	aFigure isStateFigure ifTrue: [self model addState: aFigure model].	aFigure isConnectionFigure ifTrue: [self model addConnection: aFigure model].	^super add: aFigure</body><body package="HotDraw Tool Development">addAll: aCollection 	aCollection do: [:each | self add: each].	^aCollection</body><body package="HotDraw Tool Development">addLast: aFigure 	aFigure isStateFigure ifTrue: [self model addState: aFigure model].	aFigure isConnectionFigure ifTrue: [self model addConnection: aFigure model].	^super addLast: aFigure</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineDrawing</class-id> <category>removing</category><body package="HotDraw Tool Development">remove: aFigure 	aFigure isStateFigure ifTrue: [self model removeState: aFigure model].	aFigure isConnectionFigure		ifTrue: [self model removeConnection: aFigure model].	^super remove: aFigure</body><body package="HotDraw Tool Development">removeAll: aCollection 	aCollection do: [:each | self remove: each].	^aCollection</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineEditor</class-id> <category>accessing</category><body package="HotDraw Tool Development">addConnection: aToolStateTransitionMetafigure 	connections add: aToolStateTransitionMetafigure</body><body package="HotDraw Tool Development">addState: aToolStateMetafigure	states add: aToolStateMetafigure</body><body package="HotDraw Tool Development">connections	^connections copy</body><body package="HotDraw Tool Development">removeConnection: aToolStateTransitionMetafigure 	connections remove: aToolStateTransitionMetafigure ifAbsent: []</body><body package="HotDraw Tool Development">removeState: aToolStateMetafigure	states remove: aToolStateMetafigure</body><body package="HotDraw Tool Development">states	^states copy</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineEditor</class-id> <category>compilation</category><body package="HotDraw Tool Development">writeCommentOn: codeStream 	codeStream		nextPutAll: '	"This method was automatically generated by the HotDraw ToolStateMachineEditor.';		cr;		nextPutAll: '	To edit this method, evaluate the comment below"';		cr;		cr.	self writeDrawingDefinitionOn: codeStream</body><body package="HotDraw Tool Development">writeDrawingDefinitionOn: codeStream 	codeStream		nextPutAll: '	"| states transitions stateTable |';		cr;		nextPutAll: '	states := '.	states storeOn: codeStream.	codeStream		nextPut: $.;		cr;		nextPutAll: '	stateTable := Dictionary new.';		cr;		nextPutAll: '	states do: [:each | stateTable at: each name put: each].';		cr;		cr;		nextPutAll: '	transitions := OrderedCollection new.';		cr.	connections do: 			[:each | 			codeStream nextPutAll: '	transitions add: (ToolStateTransitionModel new'.			each writeStoreStringOn: codeStream.			codeStream				nextPutAll: ').';				cr].	codeStream		nextPutAll: '	ToolStateMachineEditor openWithStates: states connections: transitions"';		cr;		cr</body><body package="HotDraw Tool Development">writeStateDefinitionsOn: codeStream 	states do: [:each | each writeDefinitionOn: codeStream]</body><body package="HotDraw Tool Development">writeTransitions: transitions on: codeStream 	transitions first writeDefinitionOn: codeStream.	2 to: transitions size		do: [:i | (transitions at: i) writeContinuedDefinitionOn: codeStream].	codeStream nextPutAll: '; yourself'</body><body package="HotDraw Tool Development">writeTransitionsOn: codeStream 	self transitionBuckets keysAndValuesDo: 			[:state :events | 			events keysAndValuesDo: 					[:event :transitions | 					codeStream						nextPutAll: '	(Tool stateFor: ''';						nextPutAll: state name;						nextPutAll: ''') ';						nextPutAll: event;						nextPutAll: ': ('.					self writeTransitions: transitions on: codeStream.					codeStream						nextPutAll: ').';						cr]]</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineEditor</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	super initialize.	states := OrderedCollection new.	connections := OrderedCollection new</body><body package="HotDraw Tool Development">states: toolStateModels connections: toolStateTransitionModels 	states := toolStateModels.	connections := toolStateTransitionModels</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineEditor</class-id> <category>actions</category><body package="HotDraw Tool Development">checkForTypeConflictsIn: transitions 	^transitions contains: 			[:transition | 			transitions				contains: [:each | transition ~~ each and: [transition type conflictsWith: each type]]]</body><body package="HotDraw Tool Development">compileForClass: aClass selector: aSymbol ifFail: aBlock 	| codeStream string |	self verifyIfFail: 			[:error | 			aBlock value: error.			^self].	codeStream := String new writeStream.	codeStream		nextPutAll: aSymbol;		cr.	self writeCommentOn: codeStream.	self writeStateDefinitionsOn: codeStream.	self writeTransitionsOn: codeStream.	string := codeStream contents.	aClass 		compile: string		classified: #'tool states'		notifying: nil</body><body package="HotDraw Tool Development">transitionBuckets	| connectionBuckets |	connectionBuckets := Dictionary new.	connections do: 			[:each | 			((connectionBuckets at: each from ifAbsentPut: [Dictionary new])				at: each type event				ifAbsentPut: 					[SortedCollection sortBlock: [:a :b | a type priority &lt; b type priority]])					add: each].	^connectionBuckets</body><body package="HotDraw Tool Development">verifyIfFail: aBlock 	| names connectionBuckets |	names := Set new.	states do: 			[:each | 			(names includes: each name) 				ifTrue: [aBlock value: each name , ' is defined multiple times']				ifFalse: [names add: each name]].	connectionBuckets := self transitionBuckets.	connectionBuckets keysAndValuesDo: 			[:state :eventTable | 			eventTable keysAndValuesDo: 					[:event :transitions | 					(self checkForTypeConflictsIn: transitions) 						ifTrue: 							[aBlock value: state name , ' has transition conflicts for event ' , event]]]</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineEditor</class-id> <category>drawing description</category><body package="HotDraw Tool Development">drawingClass	^ToolStateMachineDrawing</body><body package="HotDraw Tool Development">windowName	^'Tool State Machine Editor'</body></methods><methods><class-id>Refactory.HotDraw.ToolStateMachineEditor class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">openOnModel: aToolStateMachineModel 	^self openWithStates: aToolStateMachineModel states		connections: aToolStateMachineModel connections</body><body package="HotDraw Tool Development">openWithStates: toolStateModels connections: toolStateTransitionModels 	| figureMapping figures editor |	figures := OrderedCollection new.	figureMapping := IdentityDictionary new.	toolStateModels do: 			[:each | 			| figure |			figure := ToolStateFigure fromModel: each.			figureMapping at: each put: figure.			figures add: figure].	toolStateTransitionModels do: 			[:each | 			figures add: (StateTransitionFigure 						fromModel: each						connecting: (figureMapping at: each from)						to: (figureMapping at: each to))].	editor := self new.	editor drawing addAll: figures.	editor open.	^editor</body><body package="HotDraw Tool Development">states: toolStateModels connections: toolStateTransitionModels 	^self new states: toolStateModels connections: toolStateTransitionModels</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>updating</category><body package="HotDraw Tool Development">computePreferredBounds	| newExtent |	newExtent := self model name asComposedText extent + (10 @ 10).	^self origin extent: newExtent</body><body package="HotDraw Tool Development">resetEndState	self lineWidth: (self model isEndState ifTrue: [2] ifFalse: [1])</body><body package="HotDraw Tool Development">resetExternal	model isExternal		ifTrue: 			[self lineWidth: 1.			self lineColor: ColorValue red]		ifFalse: 			[self lineColor: ColorValue black.			self resetEndState]</body><body package="HotDraw Tool Development">resetFigure	self		computePreferredBounds;		translateTo: model position;		resetEndState;		resetExternal</body><body package="HotDraw Tool Development">update: anAspectSymbol with: aParameter from: aSender 	anAspectSymbol == #position ifTrue: [^self].	anAspectSymbol == #name ifTrue: [^self recomputePreferredBounds].	anAspectSymbol == #isEndState ifTrue: [^self resetEndState].	anAspectSymbol == #isExternal ifTrue: [^self resetExternal].	^super 		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	super initialize.	self model: ToolStateModel new.	bounds := 0 @ 0 extent: 0 @ 0.	self opaque</body><body package="HotDraw Tool Development">name: aString at: aPoint 	bounds := aPoint extent: 0 @ 0.	(self model)		name: aString;		position: aPoint</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>actions</category><body package="HotDraw Tool Development">editCommand	(ToolStateCommandEditor state: model) open</body><body package="HotDraw Tool Development">rename	| newName |	newName := Dialog request: 'Enter state name:'				initialAnswer: self model name.	newName isEmpty ifTrue: [^self].	self model name: newName</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>changing</category><body package="HotDraw Tool Development">changed	model position: self origin.	super changed</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>connection</category><body package="HotDraw Tool Development">canConnectFromFigure: aFigure 	^self class = aFigure class</body><body package="HotDraw Tool Development">canConnectToFigure: aFigure 	^self canBeConnected and: [self class = aFigure class]</body><body package="HotDraw Tool Development">connectFromPoint: myPoint to: aFigure at: figurePoint 	| newFigure |	newFigure := super 				connectFromPoint: myPoint				to: aFigure				at: figurePoint.	self == aFigure 		ifTrue: 			[newFigure				addPoint: self rightCenter + (10 @ 10) beforeIndex: 2;				addPoint: self rightCenter + (10 @ -10) beforeIndex: 2].	(newFigure model)		from: self model;		to: aFigure model.	^newFigure</body><body package="HotDraw Tool Development">connectionFigureClass	^StateTransitionFigure</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>accessing</category><body package="HotDraw Tool Development">menuAt: aPoint 	| mb isEndState isExternal |	isEndState := model isEndState.	isExternal := model isExternal.	mb := MenuBuilder new.	mb		add: 'Rename...' -&gt; #rename;		add: 'Edit command...' -&gt; #editCommand;		line;		add: (isEndState ifTrue: ['Normal state'] ifFalse: ['End state']) 					-&gt; [model isEndState: isEndState not];		add: (isExternal ifTrue: ['Define here'] ifFalse: ['Define elsewhere']) 					-&gt; [model isExternal: isExternal not].	^mb menu</body><body package="HotDraw Tool Development">name	^self model name</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>displaying</category><body package="HotDraw Tool Development">displayFigureOn: aGraphicsContext 	| text |	super displayFigureOn: aGraphicsContext.	text := self name asComposedText.	text displayOn: aGraphicsContext		at: (self extent - text extent) // 2 + self origin</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure</class-id> <category>testing</category><body package="HotDraw Tool Development">isStateFigure	^true</body></methods><methods><class-id>Refactory.HotDraw.ToolStateFigure class</class-id> <category>instance creation</category><body package="HotDraw Tool Development">createAt: aPoint 	| stateName |	NameIndex := NameIndex + 1.	stateName := 'state ' , NameIndex printString.	^(self new)		name: stateName at: aPoint;		yourself</body><body package="HotDraw Tool Development">fromModel: aToolStateModel 	| figure |	figure := self new.	figure		model: aToolStateModel;		resetFigure.	^figure</body></methods><methods><class-id>Refactory.HotDraw.FigureTransitionType</class-id> <category>accessing</category><body package="HotDraw Tool Development">figureClasses	^figureClasses</body><body package="HotDraw Tool Development">figureClasses: aCollection 	figureClasses := aCollection</body><body package="HotDraw Tool Development">priority	^figureClasses inject: 0		into: [:sum :each | sum + each withAllSubclasses size]</body></methods><methods><class-id>Refactory.HotDraw.FigureTransitionType</class-id> <category>compilation</category><body package="HotDraw Tool Development">writeDefinitionOn: codeStream to: aString 	codeStream nextPutAll: '(FigureTransitionTable new) '.	self writeMessageSendOn: codeStream to: aString</body><body package="HotDraw Tool Development">writeMessageSendOn: codeStream to: aString 	figureClasses do: 			[:each | 			codeStream				nextPutAll: ' on: ';				print: each;				nextPutAll: ' goto: ';				nextPutAll: aString]		separatedBy: [codeStream nextPutAll: '; ']</body></methods><methods><class-id>Refactory.HotDraw.FigureTransitionType</class-id> <category>printing</category><body package="HotDraw Tool Development">printOn: aStream 	super printOn: aStream.	aStream		nextPut: $/;		cr.	figureClasses do: [:each | aStream print: each]		separatedBy: [aStream nextPut: $,]</body></methods><methods><class-id>Refactory.HotDraw.FigureTransitionType</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	super initialize.	figureClasses := OrderedCollection new</body></methods><methods><class-id>Refactory.HotDraw.FigureTransitionType</class-id> <category>verifying</category><body package="HotDraw Tool Development">conflictsWith: aTransitionType 	^aTransitionType figureClasses		contains: [:each | figureClasses includes: each]</body></methods><methods><class-id>Refactory.HotDraw.FigureTransitionType class</class-id> <category>accessing</category><body package="HotDraw Tool Development">transition	^#figure</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType</class-id> <category>compilation</category><body package="HotDraw Tool Development">writeDefinitionOn: codeStream to: aString 	codeStream nextPutAll: '(CharacterTransitionTable new) '.	self writeMessageSendOn: codeStream to: aString</body><body package="HotDraw Tool Development">writeMessageSendOn: codeStream to: aString 	codeStream nextPutAll: 'forCharacters: '.	self storeCharactersOn: codeStream.	codeStream		nextPutAll: ' goto: ';		nextPutAll: aString</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType</class-id> <category>storing</category><body package="HotDraw Tool Development">storeCharactersOn: aStream 	| symbols |	symbols := characters select: [:each | each isSymbol].	symbols isEmpty 		ifTrue: [self writeCharactersOn: aStream]		ifFalse: 			[aStream nextPut: $(.			symbols asArray storeOn: aStream.			aStream nextPutAll: ' , '.			self writeCharactersOn: aStream.			aStream nextPut: $)]</body><body package="HotDraw Tool Development">storeOn: aStream 	aStream		nextPut: $(;		nextPutAll: self class name;		nextPutAll: ' new event: ';		print: event;		nextPutAll: '; characters: '.	self storeCharactersOn: aStream.	aStream nextPut: $)</body><body package="HotDraw Tool Development">writeCharactersOn: aStream 	| chars |	chars := characters reject: [:each | each isSymbol].	chars isEmpty 		ifTrue: 			[aStream nextPutAll: ''''''.			^self].	aStream nextPutAll: '(String fromIntegerArray: '.	(String withAll: chars) asByteArray storeOn: aStream.	aStream nextPut: $)</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType</class-id> <category>accessing</category><body package="HotDraw Tool Development">characters	^characters</body><body package="HotDraw Tool Development">characters: aString 	characters := aString</body><body package="HotDraw Tool Development">priority	^characters size</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType</class-id> <category>verifying</category><body package="HotDraw Tool Development">conflictsWith: aTransitionType 	^aTransitionType characters contains: [:each | characters includes: each]</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType</class-id> <category>printing</category><body package="HotDraw Tool Development">printOn: aStream 	super printOn: aStream.	aStream		nextPut: $/;		cr;		nextPutAll: 'chars'</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType</class-id> <category>initialize-release</category><body package="HotDraw Tool Development">initialize	super initialize.	event := #keyPress.	characters := OrderedCollection new</body></methods><methods><class-id>Refactory.HotDraw.CharacterTransitionType class</class-id> <category>accessing</category><body package="HotDraw Tool Development">transition	^#character</body></methods><methods><class-id>Refactory.HotDraw.Figure</class-id> <category>testing</category><body package="HotDraw Tool Development">isConnectionFigure	^false</body><body package="HotDraw Tool Development">isStateFigure	^false</body></methods><methods><class-id>Refactory.HotDraw.ToolStateCommandEditor class</class-id> <category>interface specs</category><body package="HotDraw Tool Development">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Tool state command editor' 			#bounds: #(#Rectangle 585 446 1017 757 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 5 5 ) 					#label: 'Command:' ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 5 0 30 0 -5 1 -50 1 ) 					#name: #source 					#model: #source ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin 0 0.333333 -5 1 0.5 1 ) 					#model: #acceptCommand 					#label: 'OK' 					#isDefault: false 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin 0 0.666666 -5 1 0.5 1 ) 					#model: #closeRequest 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor class</class-id> <category>resources</category><body package="HotDraw Tool Development">eventMenu	"MenuEditor new openOnClass: self andSelector: #eventMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'mouseMove' 				#value: #mouseMove ) 			#(#MenuItem 				#rawLabel: 'redButtonPress' 				#value: #redButtonPress ) 			#(#MenuItem 				#rawLabel: 'redButtonRelease' 				#value: #redButtonRelease ) 			#(#MenuItem 				#rawLabel: 'keyPress' 				#value: #keyPress ) 			#(#MenuItem 				#rawLabel: 'keyRelease' 				#value: #keyRelease ) 			#(#MenuItem 				#rawLabel: 'doubleClick' 				#value: #doubleClick ) 			#(#MenuItem 				#rawLabel: 'yellowButtonPress' 				#value: #yellowButtonPress ) 			#(#MenuItem 				#rawLabel: 'yellowButtonRelease' 				#value: #yellowButtonRelease ) 			#(#MenuItem 				#rawLabel: 'immediate' 				#nameKey: #immediate 				#value: #immediate ) ) #(1 2 2 1 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.HotDraw.TransitionEditor class</class-id> <category>interface specs</category><body package="HotDraw Tool Development">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Transition Editor' 			#bounds: #(#Rectangle 482 371 848 628 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 50 0 5 0 -5 1 35 0 ) 					#name: #event 					#model: #eventType 					#menu: #eventMenu ) 				#(#LabelSpec 					#layout: #(#Point 5 10 ) 					#label: 'Event:' ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 40 0 0 1 42 0 ) ) 				#(#RadioButtonSpec 					#layout: #(#Point 5 50 ) 					#name: #always 					#model: #transition 					#label: 'Always' 					#select: #always ) 				#(#RadioButtonSpec 					#layout: #(#Point 5 80 ) 					#name: #figure 					#model: #transition 					#label: 'Figure' 					#select: #figure ) 				#(#RadioButtonSpec 					#layout: #(#Point 5 110 ) 					#name: #character 					#model: #transition 					#label: 'Character' 					#select: #character ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 100 0 50 0 -5 1 -50 1 ) 					#name: #figureList 					#flags: 61 					#model: #figureList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin 0 0.666666 -5 1 0.5 1 ) 					#name: #cancel 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin 0 0.333333 -5 1 0.5 1 ) 					#name: #accept 					#model: #accept 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 175 0 -95 1 -5 1 -65 1 ) 					#name: #characters 					#flags: 56 					#model: #charactersHolder ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 100 0 -90 1 ) 					#name: #label 					#flags: 48 					#label: 'Characters:' ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 100 0 50 0 -5 1 -100 1 ) 					#name: #characterList 					#flags: 61 					#model: #characterList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="HotDraw Tool Development">toolsHotDrawToolStateEditor	&lt;menuItem: 'Tool State Machine Editor'		nameKey: nil		menu: #(#menuBar #tools #HotDraw)		position: 10.9&gt;	(#{Refactory.HotDraw.ToolStateMachineEditor} valueOrDo: [^self]) open</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Figure</name><environment>Refactory.HotDraw</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents state attributes model bounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>EllipseFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.Figure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Figures</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>Drawing</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.CompositeFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections handles controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>LineFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.PolylineFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>annotations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Figures</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>DrawingEditor</name><environment>Refactory.HotDraw</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>buttons drawing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class></st-source>