<?xml version="1.0"?><st-source><!-- Name: HotDraw Drawing InspectorNotice: Copyright 1993 - 2013 John BrantThis utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: psql_public_cst_2007DbTrace: 87405DbUsername: niallrDbVersion: 1.6DevelopmentPrerequisites: #(#(#any 'HotDraw Framework' ''))PackageName: HotDraw Drawing InspectorParcel: #('HotDraw Drawing Inspector')ParcelName: HotDraw Drawing InspectorPrerequisiteParcels: #(#('HotDraw Framework' ''))PrintStringCache: (1.6,niallr)Version: 1.6Post-Load Block: 	[:parcel | Refactory.HotDraw.ObjectFigure postLoadActionFor: parcel]Date: 3:03:11 PM April 5, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.4) of 22 March 2013 on 5 April 2013 at 15:03:11</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ObjectHandleModel</name><environment>Refactory.HotDraw</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Drawing Inspector</category><attributes><package>HotDraw Drawing Inspector</package></attributes></class><comment><class-id>Refactory.HotDraw.ObjectHandleModel</class-id><body>ObjectHandleModel contains information for the ObjectFigure's handles. It contains the object of the figure that is to be created as well as its offset.Instance Variables:	object	&lt;Object&gt;	the object that this handle is for. An ObjectFigure will be created for this object, it the handle is clicked on.	offset	&lt;Point&gt;	the offset from our owner for this handle</body></comment><class><name>ObjectFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.CachedFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object inEdges outEdges </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Drawing Inspector</category><attributes><package>HotDraw Drawing Inspector</package></attributes></class><comment><class-id>Refactory.HotDraw.ObjectFigure</class-id><body>ObjectFigure is a Figure that represents an object in a DrawingInspector.  ObjectFigures are wrappers for all other classes of Objects in Smalltalk so that they can be inspected inside a DrawingInspector.Instance Variables :object  &lt;Object&gt;	The object for which this is the wrapper.</body></comment><class><name>ObjectConnectionModel</name><environment>Refactory.HotDraw</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fromFigure offset toFigure </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Drawing Inspector</category><attributes><package>HotDraw Drawing Inspector</package></attributes></class><comment><class-id>Refactory.HotDraw.ObjectConnectionModel</class-id><body>ObjectConnectionModel contains the extra information needed for connections between lines. Instead of creating a subclass of LineFigure to hold this information, we store it as the model of the line.Instance Variables:	fromFigure	&lt;ObjectFigure&gt;	our originator	offset	&lt;Point&gt;	offset in the fromFigure of our start	toFigure	&lt;ObjectFigure&gt;	our destination</body></comment><methods><class-id>Refactory.HotDraw.ObjectHandleModel</class-id> <category>accessing</category><body package="HotDraw Drawing Inspector">object	^object</body><body package="HotDraw Drawing Inspector">object: anObject	object := anObject</body><body package="HotDraw Drawing Inspector">offset	^offset</body><body package="HotDraw Drawing Inspector">offset: anObject	offset := anObject</body></methods><methods><class-id>Refactory.HotDraw.ObjectHandleModel class</class-id> <category>instance creation</category><body package="HotDraw Drawing Inspector">for: anObject offset: aPoint 	^(self new)		object: anObject;		offset: aPoint;		yourself</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>accessing</category><body package="HotDraw Drawing Inspector">handles	| yloc variableNames xloc height refHandles classHandle dependentHandle referencedObject |	yloc := 'a' asComposedText height * 3 // 2.	height := 'a' asComposedText height.	(self shouldDisplayAsString 		or: [(variableNames := self allSlotNames) isEmpty]) 			ifTrue: [^Array with: (Handle on: self at: #origin)].	refHandles := OrderedCollection new.	variableNames do: 			[:varName | 			referencedObject := self instVar: varName.			referencedObject notNil 				ifTrue: 					[| xloc1 |					xloc1 := varName asComposedText width.					refHandles 						add: (self handleFor: referencedObject offset: (xloc1 + 6) @ yloc)].			yloc := yloc + height].	xloc := object class name asComposedText width.	classHandle := self handleFor: object class offset: (xloc + 4) @ 8.	dependentHandle := self handleFor: object dependents				offset: (self extent x // 2) @ 0.	^refHandles , (Array with: classHandle with: dependentHandle)</body><body package="HotDraw Drawing Inspector">inspectObject	self object inspect</body><body package="HotDraw Drawing Inspector">localInspectObject	| inspector |	inspector := Inspector inspect: object.	self drawing add: (ViewAdapterFigure 				view: (inspector allButOpenInterface: #windowSpec) window component				in: (10 @ 10 corner: 250 @ 250))</body><body package="HotDraw Drawing Inspector">menuAt: aPoint 	| mb |	mb := MenuBuilder new.	mb		add: 'inspect...' -&gt; #inspectObject;		add: 'local inspect' -&gt; #localInspectObject;		line;		add: 'other' -&gt; (super menuAt: aPoint).	^mb menu</body><body package="HotDraw Drawing Inspector">object	^object</body><body package="HotDraw Drawing Inspector">origin: aPoint 	bounds := aPoint extent: self extent</body><body package="HotDraw Drawing Inspector">title	^object class name</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>private</category><body package="HotDraw Drawing Inspector">allSlotNames	| showing max |	showing := 20.	max := object basicSize.	^object class allInstVarNames , (object class isVariable 				ifTrue: 					[(max &lt;= showing 						ifTrue: [1 to: max]						ifFalse: [(1 to: showing // 3 * 2) , (max - (showing // 3) to: max)]) 							collect: [:i | i printString]]				ifFalse: [#()])</body><body package="HotDraw Drawing Inspector">handleFor: anObject offset: aPoint 	| handle |	handle := Handle 				on: self				at: #offOrigin:				offset: aPoint.	handle model: (ObjectHandleModel for: anObject offset: aPoint).	handle toolState: (Tool stateFor: 'Object Figure Handle').	^handle</body><body package="HotDraw Drawing Inspector">instVar: aString 	| index |	index := aString first isDigit 				ifTrue: [Integer readFromString: aString]				ifFalse: [object class allInstVarNames indexOf: aString].	^aString first isDigit 		ifTrue: [object basicAt: index]		ifFalse: [object instVarAt: index]</body><body package="HotDraw Drawing Inspector">setObject: anObject origin: aPoint 	object := anObject.	self fillCache.	self origin: aPoint</body><body package="HotDraw Drawing Inspector">variableLabels	| aStream |	aStream := WriteStream on: String new.	self allSlotNames do: 			[:each | 			aStream				nextPutAll: each;				cr].	aStream isEmpty ifTrue: [^object printString] ifFalse: [aStream skip: -1].	^aStream contents</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>damage control</category><body package="HotDraw Drawing Inspector">deletionUpdateFrom: aFigure 	self removeDependent: aFigure.	aFigure removeDependent: self.	inEdges remove: aFigure ifAbsent: [].	outEdges remove: aFigure ifAbsent: []</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>connection</category><body package="HotDraw Drawing Inspector">connectFromPoint: myPoint to: aFigure at: figurePoint 	| newFigure |	newFigure := super 				connectFromPoint: myPoint				to: aFigure				at: figurePoint.	self addOutEdge: newFigure.	aFigure addInEdge: newFigure.	newFigure		addDependent: self;		addDependent: aFigure.	newFigure model: (ObjectConnectionModel new 				start: self				offset: myPoint				stop: aFigure).	^newFigure</body><body package="HotDraw Drawing Inspector">createStartConnectionConstraintFor: newFigure at: myPoint 	PositionConstraint 		send: #startPoint:		to: newFigure		with: (MessageSend 				receiver: self				selector: #offOrigin:				argument: myPoint)</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>edges</category><body package="HotDraw Drawing Inspector">addInEdge: anEdge 	inEdges add: anEdge</body><body package="HotDraw Drawing Inspector">addOutEdge: anEdge 	outEdges add: anEdge</body><body package="HotDraw Drawing Inspector">createIndirectReferenceFrom: aLineFigure to: outLineFigure 	| stopFigure startFigure edge |	startFigure := aLineFigure model start.	stopFigure := outLineFigure model stop.	edge := startFigure 				connectFromPoint: aLineFigure model offset				to: stopFigure				at: stopFigure origin.	edge lineColor: ColorValue gray.	edge lineWidth: 2.	self drawing add: edge</body><body package="HotDraw Drawing Inspector">reconnectIndirectReferences	"When an object is deleted, reconnect each input to each output."	| fromFigures toFigures |	fromFigures := (inEdges collect: [:each | each model start]) asSet.	toFigures := (outEdges collect: [:each | each model stop]) asSet.	fromFigures remove: self ifAbsent: [].	toFigures remove: self ifAbsent: [].	inEdges do: 			[:aLineFigure | 			(fromFigures includes: aLineFigure model start) 				ifTrue: 					[fromFigures remove: aLineFigure model start.					outEdges do: 							[:outLineFigure | 							(toFigures includes: outLineFigure model stop) 								ifTrue: 									[self createIndirectReferenceFrom: aLineFigure to: outLineFigure]]]]</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>displaying</category><body package="HotDraw Drawing Inspector">delete	self reconnectIndirectReferences.	super delete</body><body package="HotDraw Drawing Inspector">displayFigureOn: aGraphicsContext 	self shouldDisplayAsString 		ifTrue: 			[aGraphicsContext paint: self foregroundColor.			self displayName displayOn: aGraphicsContext at: self origin]		ifFalse: [super displayFigureOn: aGraphicsContext]</body><body package="HotDraw Drawing Inspector">displayName	| name |	name := object printString.	name size &gt; 50 ifTrue: [name := (name copyFrom: 1 to: 50) , '...'].	^name asComposedText</body><body package="HotDraw Drawing Inspector">fillCache	| title vars aGC rect |	title := self title asComposedText.	vars := self variableLabels asComposedText.	cache := Pixmap 				extent: 0 @ title height + (title extent max: vars extent) + 4.	aGC := cache graphicsContext.	aGC medium background: LookPreferences defaultForWindows backgroundColor.	aGC clear.	title displayOn: aGC at: 0 @ 0.	aGC paint: ColorValue white.	rect := 0 @ title height extent: cache extent - (0 @ title height) - 1.	aGC displayRectangle: rect.	aGC paint: ColorValue black.	aGC displayRectangularBorder: rect.	vars displayOn: aGC at: 2 @ title height.	^cache asImage</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>transforming</category><body package="HotDraw Drawing Inspector">computePreferredBounds	^bounds isNil 		ifTrue: [0 @ 0 extent: self extent]		ifFalse: [bounds origin extent: self extent]</body><body package="HotDraw Drawing Inspector">extent	^self shouldDisplayAsString 		ifTrue: [self displayName extent]		ifFalse: [self cache extent]</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>initialize-release</category><body package="HotDraw Drawing Inspector">initialize	super initialize.	inEdges := Set new.	outEdges := Set new</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure</class-id> <category>testing</category><body package="HotDraw Drawing Inspector">shouldDisplayAsString	^object isLiteral or: [#(#Point #Rectangle) includes: object class name]</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure class</class-id> <category>parcel load/unload/save</category><body package="HotDraw Drawing Inspector">obsolete	[Tool reinitialize] on: Error do: [:ex | ex return: nil].	super obsolete</body><body package="HotDraw Drawing Inspector">postLoadActionFor: aParcel	Tool reinitialize</body></methods><methods><class-id>Refactory.HotDraw.ObjectFigure class</class-id> <category>instance creation</category><body package="HotDraw Drawing Inspector">object: anObject 	^self object: anObject at: 0 @ 0</body><body package="HotDraw Drawing Inspector">object: anObject at: aPoint 	| figure |	figure := self new.	^figure		setObject: anObject origin: aPoint;		yourself</body></methods><methods><class-id>Refactory.HotDraw.ObjectConnectionModel</class-id> <category>accessing</category><body package="HotDraw Drawing Inspector">offset	^offset</body><body package="HotDraw Drawing Inspector">start	^fromFigure</body><body package="HotDraw Drawing Inspector">stop	^toFigure</body></methods><methods><class-id>Refactory.HotDraw.ObjectConnectionModel</class-id> <category>initialize-release</category><body package="HotDraw Drawing Inspector">start: aFigure offset: anOffset stop: anotherFigure	fromFigure := aFigure.	offset := anOffset.	toFigure := anotherFigure</body></methods><methods><class-id>Refactory.HotDraw.Tool class</class-id> <category>tool states</category><body package="HotDraw Drawing Inspector">initializeObjectFigureHandleStates	"This method was automatically generated by the HotDraw ToolStateMachineEditor.	To edit this method, evaluate the comment below"	"| states transitions stateTable |	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Object Figure Handle'; instVarAt: 3 put: (Text string: '[:tool :event | | handle object cursorPoint figure |cursorPoint := tool cursorPointFor: event.handle := tool figureAtEvent: event.object := handle model object.figure := tool drawing components detect: [:each | each class = ObjectFigure and: [each object == object]] 	ifNone: [nil].figure isNil ifTrue: [		figure := ObjectFigure object: object at: cursorPoint.		tool drawing add: figure.		tool drawing add: 			(handle owner 				connectFromPoint: handle model offset 				to: figure 				at: cursorPoint).		tool valueAt: #figure put: figure]	ifFalse: [tool drawing add: (handle owner 			connectFromPoint: handle model offset 			to: figure at: cursorPoint).		tool changeToState: (Tool stateFor: ''End State'') event: event]]' runs: (RunArray runs: #(770) values: #(nil))); instVarAt: 4 put: (Point x: 196 y: 46); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Object Figure Move'; instVarAt: 3 put: (Text string: '[:tool :event | (tool valueAt: #figure) translateTo: (tool cursorPointFor: event)]' runs: (RunArray runs: #(83) values: #(nil))); instVarAt: 4 put: (Point x: 87 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 329 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 302 y: 280); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).	stateTable := Dictionary new.	states do: [:each | stateTable at: each name put: each].	transitions := OrderedCollection new.	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Handle'); to: (stateTable at: 'Object Figure Move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 240 y: 76); add: (Point x: 162 y: 156); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Move'); to: (stateTable at: 'Object Figure Move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 146 y: 187); add: (Point x: 145 y: 229); add: (Point x: 100 y: 233); add: (Point x: 132 y: 186); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Move'); to: (stateTable at: 'End State'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 173 y: 186); add: (Point x: 316 y: 281); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Handle'); to: (stateTable at: 'Cancel Figure Creation'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 281 y: 76); add: (Point x: 381 y: 156); yourself); yourself).	ToolStateMachineEditor openWithStates: states connections: transitions"	Tool states at: 'Object Figure Handle' put: (ToolState name: 'Object Figure Handle' command: [:tool :event | | handle object cursorPoint figure |cursorPoint := tool cursorPointFor: event.handle := tool figureAtEvent: event.object := handle model object.figure := tool drawing components detect: [:each | each class = ObjectFigure and: [each object == object]] 	ifNone: [nil].figure isNil ifTrue: [		figure := ObjectFigure object: object at: cursorPoint.		tool drawing add: figure.		tool drawing add: 			(handle owner 				connectFromPoint: handle model offset 				to: figure 				at: cursorPoint).		tool valueAt: #figure put: figure]	ifFalse: [tool drawing add: (handle owner 			connectFromPoint: handle model offset 			to: figure at: cursorPoint).		tool changeToState: (Tool stateFor: 'End State') event: event]]).	Tool states at: 'Object Figure Move' put: (ToolState name: 'Object Figure Move' command: [:tool :event | (tool valueAt: #figure) translateTo: (tool cursorPointFor: event)]).	(Tool stateFor: 'Object Figure Handle') redButtonRelease: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Cancel Figure Creation'); yourself).	(Tool stateFor: 'Object Figure Handle') mouseMove: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Object Figure Move'); yourself).	(Tool stateFor: 'Object Figure Move') redButtonRelease: ((SimpleTransitionTable new) goto: (Tool stateFor: 'End State'); yourself).	(Tool stateFor: 'Object Figure Move') mouseMove: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Object Figure Move'); yourself).</body></methods><methods><class-id>Core.Object</class-id> <category>user interface</category><body package="HotDraw Drawing Inspector">draw	| figure drawing |	drawing := (#{Smalltalk.Refactory.HotDraw.Drawing} valueOrDo: [^self]) new.	figure := (#{Smalltalk.Refactory.HotDraw.ObjectFigure} valueOrDo: [^self]) object: self.	drawing		add: figure;		edit</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CachedFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.Figure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Figures</category><attributes><package>HotDraw Framework</package></attributes></class></st-source>